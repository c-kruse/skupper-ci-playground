version: 2.1
orbs:
    docker: circleci/docker@1.0.1
    kube-orb: circleci/kubernetes@0.11.0
    go: circleci/go@1.7.1

executors:
  go_cimg:
    docker:
      - image: cimg/go:1.22

  skopeoimg:
    docker:
      - image: quay.io/containers/skopeo:v1.16

  local_cluster_test_executor:
    machine:
      image: ubuntu-2204:2022.10.2
    resource_class: large

yaml-templates:
  branch_filters: &run_for_all_branches_and_numeric_tags
    filters:
      tags:
        only: /[0-9].*/

  v2_branch_filters: &run_for_v2_branch
    filters:
      branches:
        ignore: /.*/
        only: /v2/

  v2_release_requires: &v2_release_requires
    requires:
      - build-all
      - test-skupper-binary
      - test
      - build-container-images
      - smoke-tests

workflows:
  version: 2.1
  build-workflow:
    jobs:
      - build-all:
          <<: *run_for_all_branches_and_numeric_tags
      - test-skupper-binary:
          <<: *run_for_all_branches_and_numeric_tags
          matrix:
            parameters:
              image:
                - quay.io/centos/centos:stream8
                - quay.io/centos/centos:stream9
                - quay.io/fedora/fedora:38
                - quay.io/fedora/fedora:39
                - docker.io/debian:bullseye-slim
          requires:
            - build-all
      - test:
          <<: *run_for_all_branches_and_numeric_tags
      - build-container-images:
          <<: *run_for_all_branches_and_numeric_tags
      - smoke-tests:
          <<: *run_for_all_branches_and_numeric_tags
          requires:
            - build-container-images
      - publish-images:
         <<: *v2_release_requires
         context:
           - quay-ckruse


jobs:
  test:
    executor:
      name: go_cimg
    steps:
      - checkout
      - go/mod-download-cached
      - run:
          name: "Enforce Go Formatted Code"
          command: >
              if [ `make format -s | wc -l` -ne 0 ]; then
                git --no-pager diff
                echo "Bad formatting! execute \"\$make format\" locally and push again!"
                exit 1
              fi
      - run:
          name: Creating artifacts directory
          command: mkdir /tmp/artifacts
      - run:
          name: Run tests
          command: make cover
      - run:
          name: Generating HTML coverage report
          command: |
            mv ./cover.out /tmp/artifacts
            go tool cover -html /tmp/artifacts/cover.out -o /tmp/artifacts/cover.html
      - store_artifacts:
          path: /tmp/artifacts
          destination: test-artifacts

  build-container-images:
    executor: local_cluster_test_executor
    steps:
      - docker/install-docker
      - skopeo-install
      - checkout
      - run: docker buildx create --use --name skupper-buildx
      - run: make multiarch-oci "TAG=$(git rev-parse --short HEAD)"
      - run:
          name: Inspect images
          command: |
            find ./images/ -type f -name "*.tar" \
              -print \
              -exec skopeo inspect oci-archive:{} --format "{{ .Digest }} {{ .Architecture }}"  \; \
              -exec skopeo inspect oci-archive:{} --format "{{ .Digest }} {{ .Architecture }}" --override-arch arm64 \;
      - persist_to_workspace:
          root:
            ./
          paths:
            - images/

  build-all:
    executor:
      name: go_cimg
    environment:
      CGO_ENABLED: 0
    steps:
      - checkout
      - go/mod-download-cached
      - run: curl -sfL https://goreleaser.com/static/run | bash -s build --snapshot
      - persist_to_workspace:
          root: .
          paths:
            - dist

  test-skupper-binary:
    description: Run skupper command in a specific image
    parameters:
      image:
        type: string
    docker:
      - image: << parameters.image >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Run the skupper binary"
          command: |
            cd "dist/${CIRCLE_PROJECT_REPONAME}_linux_amd64_v1/"
            ./skupper site

  smoke-tests:
    executor: local_cluster_test_executor
    steps:
      - checkout
      - run:
          name: Install test dependencies
          command: |
            curl -Lo kind https://github.com/kubernetes-sigs/kind/releases/download/v0.24.0/kind-linux-amd64
            chmod +x kind
            sudo mv kind /usr/local/bin/

            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/

            curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
            chmod 700 get_helm.sh
            ./get_helm.sh
      - attach_workspace:
          at: /tmp/
      - run:
          name: Start Cluster
          command: |
            export IMAGE_LOAD_STRATEGY=archive
            export IMAGE_ARCHIVE_PATH=/tmp/images/
            export TAG=$(git rev-parse --short HEAD)
            export CONTROLLER_IMAGE_TAG="${TAG}"
            export CONFIG_SYNC_IMAGE_TAG="${TAG}"
            ./e2e/kind-dev-cluster.sh
            ./e2e/hack-dns.sh
      - run:
          name: Vet test deployments
          command: |
            export KUBECONFIG=~/.kube/kind-config-skupper-dev
            kubectl apply -f ./examples/test.yaml
            SKUPPER_PLATFORM=docker ./e2e/vet.sh -n public-lb 
            SKUPPER_PLATFORM=docker ./e2e/vet.sh -n public-gw 
            SKUPPER_PLATFORM=docker ./e2e/vet.sh -n public-nginx
            SKUPPER_PLATFORM=docker ./e2e/vet.sh -n public-nodeport

  publish-images:
    executor:
      name: skopeoimg
    steps:
      - attach_workspace:
          at: /tmp/
      - run:
          name: skopeo login
          command: |
            skopeo login quay.io -u "${QUAY_USER}" -p "${QUAY_TOKEN}"
      - run:
          name: publish images
          command: |
            TAG=${CIRCLE_SHA1:0:8}
            for archive in /tmp/images/*.tar; do
              TARGET="quay.io/ckruse/skupper/$(basename ${archive} .tar):${TAG}"
              echo "pushing images for ${TARGET}"
              skopeo copy --multi-arch all \
                oci-archive:"$archive" \
                "docker://${TARGET}"
            done



commands:
  skopeo-install:
    description: Install Skopeo
    steps:
      - run:
          name: Apt Install Skopeo
          command: sudo apt-get update -y && sudo apt-get install -y skopeo
